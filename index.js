const express = require("express");
const { graphqlHTTP } = require("express-graphql");
const { buildSchema } = require("graphql");
const sequelize = require("./DB");
const Company = require("./Models/Company");
const Order = require("./Models/Order");
const Products = require("./Models/Product");
const Login = require("./Models/Login");
const { ApolloError } = require("apollo-server");
const cors = require("cors");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
require("dotenv").config();

// Express —Å–µ—Ä–≤–µ—Ä “Ø“Ø—Å–≥—ç—Ö
const app = express();
app.use(cors());
app.use(express.json({ limit: "50mb" }));
app.use(express.urlencoded({ limit: "50mb", extended: true }));

// **üìå GraphQL —Å—Ö–µ–º**
const schema = buildSchema(`
  type Company {
    id: ID!
    CompanyName: String!
    Store: String!
    Register: String!
    Phone: String!
    created_at: String!
  }

  type Order {
    id: ID!
    OrderGroup: String!
    Products: String!
    Qty: Int!
    Price: Float!
    TotalPrice: Float!
    OrderDate: String
    Store: String!
  }

  type Products {
    id: ID!
    ProductName: String!
    Image: String
    Price: Float!
    Qty: Int!
    Comment: String
  }

  type Login {
    id: ID!
    username: String!
    password: String!
  }

  type AuthPayload {
    token: String!
    user: Login!
  }

  type Query {
    companies: [Company]
    orders: [Order]
    products: [Products]
    company(id: ID!): Company
  }

  type Mutation {
    addCompany(CompanyName: String!, Store: String!, Register: String!, Phone: String!): Company
    deleteCompany(id: ID!): Boolean
    updateCompany(id: ID!, CompanyName: String, Store: String, Register: String, Phone: String): Company
    addOrder(Products: String!, Qty: Int!, Price: Float!, Store: String!, OrderGroup: String!): Order
    addProduct(ProductName: String!, Image: String, Price: Float!, Qty: Int!, Comment: String): Products
    updateProduct(id: ID!, ProductName: String, Image: String, Price: Float, Qty: Int, Comment: String): Products
    deleteProduct(id: ID!): Boolean
    register(username: String!, password: String!): Login
    login(username: String!, password: String!): AuthPayload
  }
`);

// **üìå Resolvers**
const root = {
  companies: async () => {
    console.log("üì¶ –ö–æ–º–ø–∞–Ω–∏—É–¥—ã–Ω –∂–∞–≥—Å–∞–∞–ª—Ç—ã–≥ —Ç–∞—Ç–∞–∂ –±–∞–π–Ω–∞...");
    return await Company.findAll();
  },
  orders: async () => {
    console.log("üì¶ –ó–∞—Ö–∏–∞–ª–≥—É—É–¥—ã–≥ —Ç–∞—Ç–∞–∂ –±–∞–π–Ω–∞...");

    return await Order.findAll({
      order: [["OrderDate", "DESC"]], // ‚úÖ `OrderDate`-–≥ –±—É—É—Ä–∞—Ö–∞–∞—Ä —ç—Ä—ç–º–±—ç–ª—ç—Ö (DESC)
    });
  },

  products: async () => {
    console.log("üì¶ –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω“Ø“Ø–¥–∏–π–≥ —Ç–∞—Ç–∞–∂ –±–∞–π–Ω–∞...");
    return await Products.findAll();
  },

  company: async ({ id }) => {
    console.log(`üîç –ö–æ–º–ø–∞–Ω–∏ —Ö–∞–π–∂ –±–∞–π–Ω–∞: ID=${id}`);
    return (await Company.findByPk(id)) || new Error("Company not found");
  },

  addCompany: async ({ CompanyName, Store, Register, Phone }) => {
    console.log(`‚ûï –ö–æ–º–ø–∞–Ω–∏ –Ω—ç–º—ç–≥–¥—ç–∂ –±–∞–π–Ω–∞: ${CompanyName}`);
    return await Company.create({ CompanyName, Store, Register, Phone });
  },

  updateCompany: async ({ id, CompanyName, Store, Register, Phone }) => {
    console.log("üìå Updating Company ID:", id);

    if (!id) {
      console.log("‚ùå –ö–æ–º–ø–∞–Ω–∏–π ID –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞!");
      throw new Error("–ö–æ–º–ø–∞–Ω–∏–π ID –∑–∞–∞–≤–∞–ª —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π!");
    }

    try {
      console.log("üîç –ö–æ–º–ø–∞–Ω–∏ —à–∏–Ω—ç—á–∏–ª–∂ –±–∞–π–Ω–∞...");

      // ID-–∞–∞—Ä –∫–æ–º–ø–∞–Ω–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ö–∞–π–∂ –æ–ª–æ—Ö
      const company = await Company.findByPk(id);

      if (!company) {
        console.log("‚ùå –ö–æ–º–ø–∞–Ω–∏ –æ–ª–¥—Å–æ–Ω–≥“Ø–π.");
        return null;
      }

      // –ö–æ–º–ø–∞–Ω–∏ —à–∏–Ω—ç—á–ª—ç—Ö
      await company.update({
        CompanyName,
        Store,
        Register,
        Phone,
      });

      console.log("‚úÖ –ö–æ–º–ø–∞–Ω–∏ –∞–º–∂–∏–ª—Ç—Ç–∞–π —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç:", company);
      return company;
    } catch (error) {
      console.error("‚ùå –ö–æ–º–ø–∞–Ω–∏ —à–∏–Ω—ç—á–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);
      throw new Error("–°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞: –ö–æ–º–ø–∞–Ω–∏ —à–∏–Ω—ç—á–ª—ç—Ö –±–æ–ª–æ–º–∂–≥“Ø–π.");
    }
  },

  addOrder: async (args) => {
    console.log("Received args in resolver:", args);
    const { Products, Qty, Price, Store, OrderGroup } = args;

    if (!Products || !Qty || !Price || !Store || !OrderGroup) {
      throw new ApolloError("–ë“Ø—Ö —Ç–∞–ª–±–∞—Ä—É—É–¥—ã–≥ –±”©–≥–ª”©–Ω”© “Ø“Ø", "MISSING_FIELDS");
    }

    const TotalPrice = Price * Qty;

    try {
      const newOrder = await Order.create({
        Products,
        Qty,
        Price,
        TotalPrice,
        Store,
        OrderDate: new Date(),
        OrderGroup,
      });
      return newOrder;
    } catch (error) {
      console.error("addOrder resolver-–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);
      throw new ApolloError(
        `–ó–∞—Ö–∏–∞–ª–≥–∞ –Ω—ç–º—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: ${error.message}`,
        error.code || "ADD_ORDER_ERROR"
      );
    }
  },

  deleteCompany: async ({ id }) => {
    try {
      console.log(`üóë –ö–æ–º–ø–∞–Ω–∏ —É—Å—Ç–≥–∞–∂ –±–∞–π–Ω–∞: ID=${id}`);
      const company = await Company.findByPk(id);
      if (!company) {
        console.error(`‚ùå –ö–æ–º–ø–∞–Ω–∏ –æ–ª–¥—Å–æ–Ω–≥“Ø–π: ID=${id}`);
        return false;
      }
      await company.destroy();
      console.log(`‚úÖ –ö–æ–º–ø–∞–Ω–∏ –∞–º–∂–∏–ª—Ç—Ç–∞–π —É—Å—Ç–≥–∞–ª–∞–∞: ID=${id}`);
      return true;
    } catch (error) {
      console.error("‚ùå –ö–æ–º–ø–∞–Ω–∏ —É—Å—Ç–≥–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);
      return false;
    }
  },

  updateProduct: async ({ id, ProductName, Image, Price, Qty, Comment }) => {
    console.log("üìå Received ID:", id); // ‚úÖ ID –∑”©–≤ –∏—Ä–∂ –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
    if (!id) {
      console.log("‚ùå ID –æ–ª–¥—Å–æ–Ω–≥“Ø–π!");
      throw new Error("‚ùå ID –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞!");
    }

    try {
      console.log("üîç Updating Product with ID:", id);

      // ID-–∞–∞—Ä –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π–≥ —Ö–∞–π—Ö
      const product = await Products.findByPk(id);

      if (!product) {
        console.log("‚ùå –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –æ–ª–¥—Å–æ–Ω–≥“Ø–π.");
        return null;
      }

      // ”®–≥”©–≥–¥–ª–∏–π–≥ —à–∏–Ω—ç—á–ª—ç—Ö
      await product.update({
        ProductName,
        Image,
        Price,
        Qty,
        Comment,
      });

      console.log("‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç:", product);
      return product;
    } catch (error) {
      console.error("‚ùå –•–∞–¥–≥–∞–ª–∞—Ö —è–≤—Ü–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);
      throw new Error("–°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞: –•–∞–¥–≥–∞–ª–∞—Ö –±–æ–ª–æ–º–∂–≥“Ø–π.");
    }
  },

  addProduct: async ({ ProductName, Image, Price, Qty, Comment }) => {
    console.log("üìå `addProduct` Mutation –¥—É—É–¥–∞–≥–¥—Å–∞–Ω!");
    console.log("üì¶ ”®–≥”©–≥–¥”©–ª:", { ProductName, Image, Price, Qty, Comment });

    try {
      const newProduct = await Products.create({
        // ‚úÖ `Product.create()` –±–∏—à `Products.create()`
        ProductName,
        Image,
        Price,
        Qty,
        Comment,
      });

      console.log("‚úÖ –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –∞–º–∂–∏–ª—Ç—Ç–∞–π –Ω—ç–º—ç–≥–¥–ª—ç—ç:", newProduct);
      return newProduct;
    } catch (error) {
      console.error("‚ùå –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –Ω—ç–º—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);
      throw new Error("–°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞: –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –Ω—ç–º—ç—Ö –±–æ–ª–æ–º–∂–≥“Ø–π.");
    }
  },

  deleteProduct: async ({ id }) => {
    try {
      console.log(`üóëÔ∏è –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω —É—Å—Ç–≥–∞–∂ –±–∞–π–Ω–∞: ID=${id}`);
      const product = await Products.findByPk(id);
      if (!product) {
        console.error(`‚ùå –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –æ–ª–¥—Å–æ–Ω–≥“Ø–π: ID=${id}`);
        return false;
      }
      await product.destroy();
      console.log(`‚úÖ –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω —É—Å—Ç–≥–∞–ª–∞–∞: ID=${id}`);
      return true;
    } catch (error) {
      console.error("‚ùå –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω —É—Å—Ç–≥–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);
      return false;
    }
  },

  // üî• **User Authentication**
  register: async ({ username, password }) => {
    try {
      console.log(`üîê –•—ç—Ä—ç–≥–ª—ç–≥—á –±“Ø—Ä—Ç–≥—ç–∂ –±–∞–π–Ω–∞: ${username}`);
      const existingUser = await Login.findOne({ where: { username } });
      if (existingUser) {
        console.error(`‚ö†Ô∏è –•—ç—Ä—ç–≥–ª—ç–≥—á –±“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω –±–∞–π–Ω–∞!`);
        throw new Error("‚ö†Ô∏è –•—ç—Ä—ç–≥–ª—ç–≥—á –±“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω –±–∞–π–Ω–∞!");
      }

      const hashedPassword = await bcrypt.hash(password, 10);
      const user = await Login.create({ username, password: hashedPassword });
      console.log(`‚úÖ –•—ç—Ä—ç–≥–ª—ç–≥—á –∞–º–∂–∏–ª—Ç—Ç–∞–π –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç: ${username}`);
      return user;
    } catch (error) {
      console.error("‚ùå –•—ç—Ä—ç–≥–ª—ç–≥—á –±“Ø—Ä—Ç–≥—ç—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);
      throw new Error("‚ö†Ô∏è –ë“Ø—Ä—Ç–≥—ç–ª —Ö–∏–π—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.");
    }
  },

  login: async ({ username, password }) => {
    try {
      console.log(`üü¢ –ù—ç–≤—Ç—Ä—ç—Ö –æ—Ä–æ–ª–¥–ª–æ–≥–æ —Ö–∏–π–∂ –±–∞–π–Ω–∞: ${username}`);
      const user = await Login.findOne({ where: { username } });

      if (!user) {
        console.error(`‚ùå –•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π: ${username}`);
        throw new Error("–•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π!");
      }

      console.log(`üü¢ ”®–≥”©–≥–¥–ª–∏–π–Ω —Å–∞–Ω–¥ –æ–ª–¥—Å–æ–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á:`, user);

      const valid = await bcrypt.compare(password, user.password);
      if (!valid) {
        console.error(`‚ùå –ù—É—É—Ü “Ø–≥ –±—É—Ä—É—É!`);
        throw new Error("–ù—É—É—Ü “Ø–≥ –±—É—Ä—É—É!");
      }

      const token = jwt.sign(
        { userId: user.id },
        process.env.SECRET_KEY || "DEFAULT_SECRET",
        { expiresIn: "1h" }
      );

      console.log(`‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π –Ω—ç–≤—Ç—ç—Ä–ª—ç—ç!`);
      return { token, user };
    } catch (error) {
      console.error("‚ùå –ù—ç–≤—Ç—Ä—ç—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);
      throw new Error("–ù—ç–≤—Ç—Ä—ç—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.");
    }
  },
};

// **GraphQL Server**
app.use(
  "/graphql",
  graphqlHTTP({
    schema,
    rootValue: root,
    graphiql: true,
  })
);

// **–°–µ—Ä–≤–µ—Ä –∞–∂–∏–ª–ª—É—É–ª–∞—Ö**
app.listen(4001, async () => {
  console.log("üöÄ Server running at http://192.168.1.4:4001/graphql");
  try {
    await sequelize.authenticate();
    console.log("‚úÖ Database connected.");
    await sequelize.sync();
    console.log("‚úÖ Database synchronized.");
  } catch (error) {
    console.error("‚ùå Database connection error:", error);
  }
});
